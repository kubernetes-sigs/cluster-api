/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta2

import clusterv1 "sigs.k8s.io/cluster-api/api/core/v1beta2"

// Conditions that will be used for the DockerCluster object in v1Beta2 API version.
const (
	// DockerClusterReadyCondition is true if the DockerCluster is not deleted,
	// and LoadBalancerAvailable condition is true.
	DockerClusterReadyCondition = clusterv1.ReadyCondition

	// DockerClusterLoadBalancerAvailableCondition documents the availability of the container that implements the cluster load balancer.
	DockerClusterLoadBalancerAvailableCondition clusterv1.ConditionType = "LoadBalancerAvailable"

	// DockerClusterDeletingCondition surfaces details about ongoing deletion of the DockerCluster.
	DockerClusterDeletingCondition = clusterv1.DeletingCondition
)

// Conditions that will be used for the DockerMachine object in v1Beta2 API version.
const (
	// DockerMachineReadyCondition is true if the DockerMachine is not deleted,
	// and both BootstrapExecSucceeded and ContainerProvisioned conditions are true.
	DockerMachineReadyCondition = clusterv1.ReadyCondition

	// DockerMachineContainerProvisionedCondition documents the status of the provisioning of the container
	// generated by a DockerMachine.
	//
	// NOTE as a difference from other providers, container provisioning and bootstrap are directly managed
	// by the DockerMachine controller (not by cloud-init).
	DockerMachineContainerProvisionedCondition clusterv1.ConditionType = "ContainerProvisioned"

	// DockerMachineBootstrapExecSucceededCondition provides an observation of the DockerMachine bootstrap process.
	// It is set based on successful execution of bootstrap commands and on the existence of
	// the /run/cluster-api/bootstrap-success.complete file.
	// The condition gets generated after ContainerProvisionedCondition is True.
	//
	// NOTE as a difference from other providers, container provisioning and bootstrap are directly managed
	// by the DockerMachine controller (not by cloud-init).
	DockerMachineBootstrapExecSucceededCondition clusterv1.ConditionType = "BootstrapExecSucceeded"

	// DockerMachineDeletingCondition surfaces details about ongoing deletion of the DockerMachine.
	DockerMachineDeletingCondition = clusterv1.DeletingCondition
)
