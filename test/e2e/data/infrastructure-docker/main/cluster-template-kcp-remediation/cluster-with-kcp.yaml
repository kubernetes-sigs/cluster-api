---
# DockerCluster object referenced by the Cluster object
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: DockerCluster
metadata:
  name: '${CLUSTER_NAME}'
---
# Cluster object with
# - Reference to the KubeadmControlPlane object
# - the label cni=${CLUSTER_NAME}-crs-0, so the cluster can be selected by the ClusterResourceSet.
apiVersion: cluster.x-k8s.io/v1beta2
kind: Cluster
metadata:
  name: '${CLUSTER_NAME}'
  labels:
    cni: "${CLUSTER_NAME}-crs-0"
spec:
  clusterNetwork:
    services:
      cidrBlocks: ['${DOCKER_SERVICE_CIDRS}']
    pods:
      cidrBlocks: ['${DOCKER_POD_CIDRS}']
    serviceDomain: '${DOCKER_SERVICE_DOMAIN}'
  infrastructureRef:
    apiGroup: infrastructure.cluster.x-k8s.io
    kind: DockerCluster
    name: '${CLUSTER_NAME}'
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiGroup: controlplane.cluster.x-k8s.io
    name: "${CLUSTER_NAME}-control-plane"
---
# DockerMachineTemplate object referenced by the KubeadmControlPlane object
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: DockerMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      preLoadImages: ${DOCKER_PRELOAD_IMAGES:-[]}
---
# KubeadmControlPlane referenced by the Cluster
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta2
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: DockerMachineTemplate
      apiGroup: infrastructure.cluster.x-k8s.io
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        # host.docker.internal is required by kubetest when running on MacOS because of the way ports are proxied.
        certSANs: [localhost, 127.0.0.1, 0.0.0.0, host.docker.internal]
    files:
    - path: /wait-signal.sh
      content: |
        #!/bin/bash
  
        set -o errexit
        set -o pipefail
        
        echo "Waiting for signal..."
        
        TOKEN=$1
        SERVER=$2
        NAMESPACE=$3
        
        while true;
        do
          sleep 1s
  
          signal=$(curl -k -s --header "Authorization: Bearer $TOKEN" $SERVER/api/v1/namespaces/$NAMESPACE/configmaps/mhc-test | jq -r .data.signal?)
          echo "signal $signal"
  
          if [ "$signal" == "pass" ]; then
             curl -k -s --header "Authorization: Bearer $TOKEN" -XPATCH -H "Content-Type: application/strategic-merge-patch+json" --data '{"data": {"signal": "ack-pass"}}' $SERVER/api/v1/namespaces/$NAMESPACE/configmaps/mhc-test
             exit 0
          fi
        done
      permissions: "0777"
    preKubeadmCommands:
    - ./wait-signal.sh "${TOKEN}" "${SERVER}" "${NAMESPACE}"
  version: "${KUBERNETES_VERSION}"
