/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta2

import clusterv1 "sigs.k8s.io/cluster-api/api/v1beta2"

// KubeadmControlPlane's Available condition and corresponding reasons.
const (
	// KubeadmControlPlaneAvailableCondition is true if KubeadmControlPlane is not deleted, `CertificatesAvailable` is true,
	// at least one Machine with healthy control plane components, and etcd has enough operational members to meet quorum requirements.
	// More specifically, considering how kubeadm layouts components:
	// -  Kubernetes API server, scheduler and controller manager health is inferred by the status of
	//    the corresponding Pods hosted on each machine.
	// -  In case of managed etcd, also a healthy etcd Pod and a healthy etcd member must exist on the same
	//    machine with the healthy Kubernetes API server, scheduler and controller manager, otherwise the k8s control
	//    plane cannot be considered operational (if etcd is not operational on a machine, most likely also API server,
	//    scheduler and controller manager on the same machine will be impacted).
	// -  In case of external etcd, KCP cannot make any assumption on etcd status, so all the etcd checks are skipped.
	//
	// Please note that when this condition is true, partial unavailability will be surfaced in the condition message,
	// but with a 10s delay to ensure flakes do not impact condition stability.
	KubeadmControlPlaneAvailableCondition = clusterv1.AvailableCondition

	// KubeadmControlPlaneAvailableInspectionFailedReason documents a failure when inspecting the status of the
	// etcd cluster hosted on KubeadmControlPlane controlled machines.
	KubeadmControlPlaneAvailableInspectionFailedReason = clusterv1.InspectionFailedReason

	// KubeadmControlPlaneAvailableReason surfaces when the KubeadmControlPlane is available.
	KubeadmControlPlaneAvailableReason = clusterv1.AvailableReason

	// KubeadmControlPlaneNotAvailableReason surfaces when the KubeadmControlPlane is not available.
	KubeadmControlPlaneNotAvailableReason = clusterv1.NotAvailableReason
)

// KubeadmControlPlane's Initialized condition and corresponding reasons.
const (
	// KubeadmControlPlaneInitializedCondition is true when the control plane is functional enough to accept
	// requests. This information is usually used as a signal for starting all the provisioning operations that
	// depend on a functional API server, but do not require a full HA control plane to exist.
	KubeadmControlPlaneInitializedCondition = "Initialized"

	// KubeadmControlPlaneInitializedReason surfaces when the control plane is initialized.
	KubeadmControlPlaneInitializedReason = "Initialized"

	// KubeadmControlPlaneNotInitializedReason surfaces when the control plane is not initialized.
	KubeadmControlPlaneNotInitializedReason = "NotInitialized"
)

// KubeadmControlPlane's CertificatesAvailable condition and corresponding reasons.
const (
	// KubeadmControlPlaneCertificatesAvailableCondition True if all the cluster certificates exist.
	KubeadmControlPlaneCertificatesAvailableCondition = "CertificatesAvailable"

	// KubeadmControlPlaneCertificatesInternalErrorReason surfaces unexpected failures when reconciling cluster certificates.
	KubeadmControlPlaneCertificatesInternalErrorReason = clusterv1.InternalErrorReason

	// KubeadmControlPlaneCertificatesAvailableReason surfaces when cluster certificates are available,
	// no matter if those certificates have been provided by the user or generated by  KubeadmControlPlane itself.
	// Cluster certificates include: certificate authorities for ca, sa, front-proxy, etcd, and if external etcd is used,
	// also the apiserver-etcd-client client certificate.
	KubeadmControlPlaneCertificatesAvailableReason = clusterv1.AvailableReason
)

// KubeadmControlPlane's EtcdClusterHealthy condition and corresponding reasons.
const (
	// KubeadmControlPlaneEtcdClusterHealthyCondition surfaces issues to etcd cluster hosted on machines managed by this object.
	// It is computed as aggregation of Machine's EtcdMemberHealthy conditions plus additional checks validating
	// potential issues to etcd quorum.
	// Note: this condition is not set when using an external etcd.
	KubeadmControlPlaneEtcdClusterHealthyCondition = "EtcdClusterHealthy"

	// KubeadmControlPlaneEtcdClusterInspectionFailedReason documents a failure when inspecting the status of the
	// etcd cluster hosted on KubeadmControlPlane controlled machines.
	KubeadmControlPlaneEtcdClusterInspectionFailedReason = clusterv1.InspectionFailedReason

	// KubeadmControlPlaneEtcdClusterConnectionDownReason surfaces that the connection to the workload
	// cluster is down.
	KubeadmControlPlaneEtcdClusterConnectionDownReason = clusterv1.ConnectionDownReason

	// KubeadmControlPlaneEtcdClusterHealthyReason surfaces when the etcd cluster hosted on KubeadmControlPlane
	// machines is healthy.
	KubeadmControlPlaneEtcdClusterHealthyReason = "Healthy"

	// KubeadmControlPlaneEtcdClusterNotHealthyReason surfaces when the etcd cluster hosted on KubeadmControlPlane
	// machines is not healthy.
	KubeadmControlPlaneEtcdClusterNotHealthyReason = "NotHealthy"

	// KubeadmControlPlaneEtcdClusterHealthUnknownReason surfaces when the health status of the etcd cluster hosted
	// on KubeadmControlPlane machines is unknown.
	KubeadmControlPlaneEtcdClusterHealthUnknownReason = "HealthUnknown"
)

// KubeadmControlPlane's ControlPlaneComponentsHealthy condition and corresponding reasons.
const (
	// KubeadmControlPlaneControlPlaneComponentsHealthyCondition surfaces issues to Kubernetes control plane components
	// hosted on machines managed by this object. It is computed as aggregation of Machine's `APIServerPodHealthy`,
	// `ControllerManagerPodHealthy`, `SchedulerPodHealthy`, `EtcdPodHealthy` conditions plus additional checks on
	// control plane machines and nodes.
	KubeadmControlPlaneControlPlaneComponentsHealthyCondition = "ControlPlaneComponentsHealthy"

	// KubeadmControlPlaneControlPlaneComponentsInspectionFailedReason documents a failure when inspecting the status of the
	// control plane components hosted on KubeadmControlPlane controlled machines.
	KubeadmControlPlaneControlPlaneComponentsInspectionFailedReason = clusterv1.InspectionFailedReason

	// KubeadmControlPlaneControlPlaneComponentsConnectionDownReason surfaces that the connection to the workload
	// cluster is down.
	KubeadmControlPlaneControlPlaneComponentsConnectionDownReason = clusterv1.ConnectionDownReason

	// KubeadmControlPlaneControlPlaneComponentsHealthyReason surfaces when the Kubernetes control plane components
	// hosted on KubeadmControlPlane machines are healthy.
	KubeadmControlPlaneControlPlaneComponentsHealthyReason = "Healthy"

	// KubeadmControlPlaneControlPlaneComponentsNotHealthyReason surfaces when the Kubernetes control plane components
	// hosted on KubeadmControlPlane machines are not healthy.
	KubeadmControlPlaneControlPlaneComponentsNotHealthyReason = "NotHealthy"

	// KubeadmControlPlaneControlPlaneComponentsHealthUnknownReason surfaces when the health status of the
	// Kubernetes control plane components hosted on KubeadmControlPlane machines is unknown.
	KubeadmControlPlaneControlPlaneComponentsHealthUnknownReason = "HealthUnknown"
)

// KubeadmControlPlane's MachinesReady condition and corresponding reasons.
const (
	// KubeadmControlPlaneMachinesReadyCondition surfaces detail of issues on the controlled machines, if any.
	// Please note this will include also APIServerPodHealthy, ControllerManagerPodHealthy, SchedulerPodHealthy conditions.
	// If not using an external etcd also EtcdPodHealthy, EtcdMemberHealthy conditions are included.
	KubeadmControlPlaneMachinesReadyCondition = clusterv1.MachinesReadyCondition

	// KubeadmControlPlaneMachinesReadyReason surfaces when all the controlled machine's Ready conditions are true.
	KubeadmControlPlaneMachinesReadyReason = clusterv1.ReadyReason

	// KubeadmControlPlaneMachinesNotReadyReason surfaces when at least one of the controlled machine's Ready conditions is false.
	KubeadmControlPlaneMachinesNotReadyReason = clusterv1.NotReadyReason

	// KubeadmControlPlaneMachinesReadyUnknownReason surfaces when at least one of the controlled machine's Ready conditions is unknown
	// and no one of the controlled machine's Ready conditions is false.
	KubeadmControlPlaneMachinesReadyUnknownReason = clusterv1.ReadyUnknownReason

	// KubeadmControlPlaneMachinesReadyNoReplicasReason surfaces when no machines exist for the KubeadmControlPlane.
	KubeadmControlPlaneMachinesReadyNoReplicasReason = clusterv1.NoReplicasReason

	// KubeadmControlPlaneMachinesReadyInternalErrorReason surfaces unexpected failures when computing the MachinesReady condition.
	KubeadmControlPlaneMachinesReadyInternalErrorReason = clusterv1.InternalErrorReason
)

// KubeadmControlPlane's MachinesUpToDate condition and corresponding reasons.
const (
	// KubeadmControlPlaneMachinesUpToDateCondition surfaces details of controlled machines not up to date, if any.
	// Note: New machines are considered 10s after machine creation. This gives time to the machine's owner controller to recognize the new machine and add the UpToDate condition.
	KubeadmControlPlaneMachinesUpToDateCondition = clusterv1.MachinesUpToDateCondition

	// KubeadmControlPlaneMachinesUpToDateReason surfaces when all the controlled machine's UpToDate conditions are true.
	KubeadmControlPlaneMachinesUpToDateReason = clusterv1.UpToDateReason

	// KubeadmControlPlaneMachinesNotUpToDateReason surfaces when at least one of the controlled machine's UpToDate conditions is false.
	KubeadmControlPlaneMachinesNotUpToDateReason = clusterv1.NotUpToDateReason

	// KubeadmControlPlaneMachinesUpToDateUnknownReason surfaces when at least one of the controlled machine's UpToDate conditions is unknown
	// and no one of the controlled machine's UpToDate conditions is false.
	KubeadmControlPlaneMachinesUpToDateUnknownReason = clusterv1.UpToDateUnknownReason

	// KubeadmControlPlaneMachinesUpToDateNoReplicasReason surfaces when no machines exist for the KubeadmControlPlane.
	KubeadmControlPlaneMachinesUpToDateNoReplicasReason = clusterv1.NoReplicasReason

	// KubeadmControlPlaneMachinesUpToDateInternalErrorReason surfaces unexpected failures when computing the MachinesUpToDate condition.
	KubeadmControlPlaneMachinesUpToDateInternalErrorReason = clusterv1.InternalErrorReason
)

// KubeadmControlPlane's RollingOut condition and corresponding reasons.
const (
	// KubeadmControlPlaneRollingOutCondition  is true if there is at least one machine not up-to-date.
	KubeadmControlPlaneRollingOutCondition = clusterv1.RollingOutCondition

	// KubeadmControlPlaneRollingOutReason  surfaces when there is at least one machine not up-to-date.
	KubeadmControlPlaneRollingOutReason = clusterv1.RollingOutReason

	// KubeadmControlPlaneNotRollingOutReason surfaces when all the machines are up-to-date.
	KubeadmControlPlaneNotRollingOutReason = clusterv1.NotRollingOutReason
)

// KubeadmControlPlane's ScalingUp condition and corresponding reasons.
const (
	// KubeadmControlPlaneScalingUpCondition is true if actual replicas < desired replicas.
	// Note: In case a KubeadmControlPlane preflight check is preventing scale up, this will surface in the condition message.
	KubeadmControlPlaneScalingUpCondition = clusterv1.ScalingUpCondition

	// KubeadmControlPlaneScalingUpReason surfaces when actual replicas < desired replicas.
	KubeadmControlPlaneScalingUpReason = clusterv1.ScalingUpReason

	// KubeadmControlPlaneNotScalingUpReason surfaces when actual replicas >= desired replicas.
	KubeadmControlPlaneNotScalingUpReason = clusterv1.NotScalingUpReason

	// KubeadmControlPlaneScalingUpWaitingForReplicasSetReason surfaces when the .spec.replicas
	// field of the KubeadmControlPlane is not set.
	KubeadmControlPlaneScalingUpWaitingForReplicasSetReason = clusterv1.WaitingForReplicasSetReason
)

// KubeadmControlPlane's ScalingDown condition and corresponding reasons.
const (
	// KubeadmControlPlaneScalingDownCondition is true if actual replicas > desired replicas.
	// Note: In case a KubeadmControlPlane preflight check is preventing scale down, this will surface in the condition message.
	KubeadmControlPlaneScalingDownCondition = clusterv1.ScalingDownCondition

	// KubeadmControlPlaneScalingDownReason surfaces when actual replicas > desired replicas.
	KubeadmControlPlaneScalingDownReason = clusterv1.ScalingDownReason

	// KubeadmControlPlaneNotScalingDownReason surfaces when actual replicas <= desired replicas.
	KubeadmControlPlaneNotScalingDownReason = clusterv1.NotScalingDownReason

	// KubeadmControlPlaneScalingDownWaitingForReplicasSetReason surfaces when the .spec.replicas
	// field of the KubeadmControlPlane is not set.
	KubeadmControlPlaneScalingDownWaitingForReplicasSetReason = clusterv1.WaitingForReplicasSetReason
)

// KubeadmControlPlane's Remediating condition and corresponding reasons.
const (
	// KubeadmControlPlaneRemediatingCondition surfaces details about ongoing remediation of the controlled machines, if any.
	// Note: KubeadmControlPlane only remediates machines with HealthCheckSucceeded set to false and with the OwnerRemediated condition set to false.
	KubeadmControlPlaneRemediatingCondition = clusterv1.RemediatingCondition

	// KubeadmControlPlaneRemediatingReason surfaces when the KubeadmControlPlane has at least one machine with HealthCheckSucceeded set to false
	// and with the OwnerRemediated condition set to false.
	KubeadmControlPlaneRemediatingReason = clusterv1.RemediatingReason

	// KubeadmControlPlaneNotRemediatingReason surfaces when the KubeadmControlPlane does not have any machine with HealthCheckSucceeded set to false
	// and with the OwnerRemediated condition set to false.
	KubeadmControlPlaneNotRemediatingReason = clusterv1.NotRemediatingReason

	// KubeadmControlPlaneRemediatingInternalErrorReason surfaces unexpected failures when computing the Remediating condition.
	KubeadmControlPlaneRemediatingInternalErrorReason = clusterv1.InternalErrorReason
)

// Reasons that will be used for the OwnerRemediated condition set by MachineHealthCheck on KubeadmControlPlane controlled machines
// being remediated in v1Beta2 API version.
const (
	// KubeadmControlPlaneMachineRemediationInternalErrorReason surfaces unexpected failures while remediating a control plane machine.
	KubeadmControlPlaneMachineRemediationInternalErrorReason = clusterv1.InternalErrorReason

	// KubeadmControlPlaneMachineCannotBeRemediatedReason surfaces when remediation of a control plane machine can't be started.
	KubeadmControlPlaneMachineCannotBeRemediatedReason = "CannotBeRemediated"

	// KubeadmControlPlaneMachineRemediationDeferredReason surfaces when remediation of a control plane machine must be deferred.
	KubeadmControlPlaneMachineRemediationDeferredReason = "RemediationDeferred"

	// KubeadmControlPlaneMachineRemediationMachineDeletingReason surfaces when remediation of a control plane machine
	// has been completed by deleting the unhealthy machine.
	// Note: After an unhealthy machine is deleted, a new one is created by the KubeadmControlPlaneMachine as part of the
	// regular reconcile loop that ensures the correct number of replicas exist; KubeadmControlPlane machine waits for
	// the new machine to exists before removing the controlplane.cluster.x-k8s.io/remediation-in-progress annotation.
	// This is part of a series of safeguards to ensure that operation are performed sequentially on control plane machines.
	KubeadmControlPlaneMachineRemediationMachineDeletingReason = "MachineDeleting"
)

// KubeadmControlPlane's Deleting condition and corresponding reasons.
const (
	// KubeadmControlPlaneDeletingCondition surfaces details about ongoing deletion of the controlled machines.
	KubeadmControlPlaneDeletingCondition = clusterv1.DeletingCondition

	// KubeadmControlPlaneNotDeletingReason surfaces when the KCP is not deleting because the
	// DeletionTimestamp is not set.
	KubeadmControlPlaneNotDeletingReason = clusterv1.NotDeletingReason

	// KubeadmControlPlaneDeletingWaitingForWorkersDeletionReason surfaces when the KCP deletion
	// waits for the workers to be deleted.
	KubeadmControlPlaneDeletingWaitingForWorkersDeletionReason = "WaitingForWorkersDeletion"

	// KubeadmControlPlaneDeletingWaitingForMachineDeletionReason surfaces when the KCP deletion
	// waits for the control plane Machines to be deleted.
	KubeadmControlPlaneDeletingWaitingForMachineDeletionReason = "WaitingForMachineDeletion"

	// KubeadmControlPlaneDeletingDeletionCompletedReason surfaces when the KCP deletion has been completed.
	// This reason is set right after the `kubeadm.controlplane.cluster.x-k8s.io` finalizer is removed.
	// This means that the object will go away (i.e. be removed from etcd), except if there are other
	// finalizers on the KCP object.
	KubeadmControlPlaneDeletingDeletionCompletedReason = clusterv1.DeletionCompletedReason

	// KubeadmControlPlaneDeletingInternalErrorReason surfaces unexpected failures when deleting a KCP object.
	KubeadmControlPlaneDeletingInternalErrorReason = clusterv1.InternalErrorReason
)

// APIServerPodHealthy, ControllerManagerPodHealthy, SchedulerPodHealthy and EtcdPodHealthy condition and corresponding
// reasons that will be used for KubeadmControlPlane controlled machines in v1Beta2 API version.
const (
	// KubeadmControlPlaneMachineAPIServerPodHealthyCondition surfaces the status of the API server pod hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineAPIServerPodHealthyCondition = "APIServerPodHealthy"

	// KubeadmControlPlaneMachineControllerManagerPodHealthyCondition surfaces the status of the controller manager pod hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineControllerManagerPodHealthyCondition = "ControllerManagerPodHealthy"

	// KubeadmControlPlaneMachineSchedulerPodHealthyCondition surfaces the status of the scheduler pod hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineSchedulerPodHealthyCondition = "SchedulerPodHealthy"

	// KubeadmControlPlaneMachineEtcdPodHealthyCondition surfaces the status of the etcd pod hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineEtcdPodHealthyCondition = "EtcdPodHealthy"

	// KubeadmControlPlaneMachinePodRunningReason surfaces a pod hosted on a KubeadmControlPlane controlled machine that is running.
	KubeadmControlPlaneMachinePodRunningReason = "Running"

	// KubeadmControlPlaneMachinePodProvisioningReason surfaces a pod hosted on a KubeadmControlPlane controlled machine
	// waiting to be provisioned i.e., Pod is in "Pending" phase.
	KubeadmControlPlaneMachinePodProvisioningReason = "Provisioning"

	// KubeadmControlPlaneMachinePodDoesNotExistReason surfaces a when a pod hosted on a KubeadmControlPlane controlled machine
	// does not exist.
	KubeadmControlPlaneMachinePodDoesNotExistReason = "DoesNotExist"

	// KubeadmControlPlaneMachinePodFailedReason surfaces a when a pod hosted on a KubeadmControlPlane controlled machine
	// failed during provisioning, e.g. CrashLoopBackOff, ImagePullBackOff or if all the containers in a pod have terminated.
	KubeadmControlPlaneMachinePodFailedReason = "Failed"

	// KubeadmControlPlaneMachinePodInspectionFailedReason documents a failure when inspecting the status of a
	// pod hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachinePodInspectionFailedReason = clusterv1.InspectionFailedReason

	// KubeadmControlPlaneMachinePodConnectionDownReason surfaces that the connection to the workload
	// cluster is down.
	KubeadmControlPlaneMachinePodConnectionDownReason = clusterv1.ConnectionDownReason

	// KubeadmControlPlaneMachinePodDeletingReason surfaces when the machine hosting control plane components
	// is being deleted.
	KubeadmControlPlaneMachinePodDeletingReason = "Deleting"
)

// EtcdMemberHealthy condition and corresponding reasons that will be used for KubeadmControlPlane controlled machines in v1Beta2 API version.
const (
	// KubeadmControlPlaneMachineEtcdMemberHealthyCondition surfaces the status of the etcd member hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineEtcdMemberHealthyCondition = "EtcdMemberHealthy"

	// KubeadmControlPlaneMachineEtcdMemberNotHealthyReason surfaces when the etcd member hosted on a KubeadmControlPlane controlled machine is not healthy.
	KubeadmControlPlaneMachineEtcdMemberNotHealthyReason = "NotHealthy"

	// KubeadmControlPlaneMachineEtcdMemberHealthyReason surfaces when the etcd member hosted on a KubeadmControlPlane controlled machine is healthy.
	KubeadmControlPlaneMachineEtcdMemberHealthyReason = "Healthy"

	// KubeadmControlPlaneMachineEtcdMemberInspectionFailedReason documents a failure when inspecting the status of an
	// etcd member hosted on a KubeadmControlPlane controlled machine.
	KubeadmControlPlaneMachineEtcdMemberInspectionFailedReason = clusterv1.InspectionFailedReason

	// KubeadmControlPlaneMachineEtcdMemberConnectionDownReason surfaces that the connection to the workload
	// cluster is down.
	KubeadmControlPlaneMachineEtcdMemberConnectionDownReason = clusterv1.ConnectionDownReason

	// KubeadmControlPlaneMachineEtcdMemberDeletingReason surfaces when the machine hosting an etcd member
	// is being deleted.
	KubeadmControlPlaneMachineEtcdMemberDeletingReason = "Deleting"
)
