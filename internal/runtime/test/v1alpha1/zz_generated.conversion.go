//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1alpha2 "sigs.k8s.io/cluster-api/internal/runtime/test/v1alpha2"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*FakeRequest)(nil), (*v1alpha2.FakeRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_FakeRequest_To_v1alpha2_FakeRequest(a.(*FakeRequest), b.(*v1alpha2.FakeRequest), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.FakeRequest)(nil), (*FakeRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_FakeRequest_To_v1alpha1_FakeRequest(a.(*v1alpha2.FakeRequest), b.(*FakeRequest), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.FakeResponse)(nil), (*FakeResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_FakeResponse_To_v1alpha1_FakeResponse(a.(*v1alpha2.FakeResponse), b.(*FakeResponse), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*FakeResponse)(nil), (*v1alpha2.FakeResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_FakeResponse_To_v1alpha2_FakeResponse(a.(*FakeResponse), b.(*v1alpha2.FakeResponse), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_FakeRequest_To_v1alpha2_FakeRequest(in *FakeRequest, out *v1alpha2.FakeRequest, s conversion.Scope) error {
	out.CommonRequest = in.CommonRequest
	out.Cluster = in.Cluster
	out.Second = in.Second
	out.First = in.First
	return nil
}

// Convert_v1alpha1_FakeRequest_To_v1alpha2_FakeRequest is an autogenerated conversion function.
func Convert_v1alpha1_FakeRequest_To_v1alpha2_FakeRequest(in *FakeRequest, out *v1alpha2.FakeRequest, s conversion.Scope) error {
	return autoConvert_v1alpha1_FakeRequest_To_v1alpha2_FakeRequest(in, out, s)
}

func autoConvert_v1alpha2_FakeRequest_To_v1alpha1_FakeRequest(in *v1alpha2.FakeRequest, out *FakeRequest, s conversion.Scope) error {
	out.CommonRequest = in.CommonRequest
	out.Cluster = in.Cluster
	out.Second = in.Second
	out.First = in.First
	return nil
}

// Convert_v1alpha2_FakeRequest_To_v1alpha1_FakeRequest is an autogenerated conversion function.
func Convert_v1alpha2_FakeRequest_To_v1alpha1_FakeRequest(in *v1alpha2.FakeRequest, out *FakeRequest, s conversion.Scope) error {
	return autoConvert_v1alpha2_FakeRequest_To_v1alpha1_FakeRequest(in, out, s)
}

func autoConvert_v1alpha1_FakeResponse_To_v1alpha2_FakeResponse(in *FakeResponse, out *v1alpha2.FakeResponse, s conversion.Scope) error {
	out.CommonResponse = in.CommonResponse
	out.Second = in.Second
	out.First = in.First
	return nil
}

func autoConvert_v1alpha2_FakeResponse_To_v1alpha1_FakeResponse(in *v1alpha2.FakeResponse, out *FakeResponse, s conversion.Scope) error {
	out.CommonResponse = in.CommonResponse
	out.Second = in.Second
	out.First = in.First
	return nil
}

// Convert_v1alpha2_FakeResponse_To_v1alpha1_FakeResponse is an autogenerated conversion function.
func Convert_v1alpha2_FakeResponse_To_v1alpha1_FakeResponse(in *v1alpha2.FakeResponse, out *FakeResponse, s conversion.Scope) error {
	return autoConvert_v1alpha2_FakeResponse_To_v1alpha1_FakeResponse(in, out, s)
}
