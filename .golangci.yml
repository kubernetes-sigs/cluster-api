run:
  timeout: 10m
  go: "1.22"
  build-tags:
    - tools
    - e2e
  skip-files:
    - "zz_generated.*\\.go$"
    - "vendored_openapi\\.go$"
    # We don't want to invest time to fix new linter findings in old API types.
    - "internal/apis/.*"
  allow-parallel-runners: true

linters:
  disable-all: true
  enable:
  - asasalint
  - asciicheck
  - bidichk
  - bodyclose
  - containedctx
  - copyloopvar
  - dogsled
  - dupword
  - durationcheck
  - errcheck
  - errchkjson
  - gci
  - ginkgolinter
  - goconst
  - gocritic
  - godot
  - gofmt
  - goimports
  - goprintffuncname
  - gosec
  - gosimple
  - govet
  - importas
  - ineffassign
  - intrange
  - loggercheck
  - misspell
  - nakedret
  - nilerr
  - noctx
  - nolintlint
  - nosprintfhostport
  - prealloc
  - predeclared
  - revive
  - rowserrcheck
  - staticcheck
  - stylecheck
  - tenv
  - thelper
  - typecheck
  - unconvert
  - unparam
  - unused
  - usestdlibvars
  - whitespace

linters-settings:
  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(sigs.k8s.io/cluster-api) # Custom section: groups all imports with the specified Prefix.
    custom-order: true
  ginkgolinter:
    forbid-focus-container: true
  godot:
    #   declarations - for top level declaration comments (default);
    #   toplevel     - for top level comments;
    #   all          - for all comments.
    scope: toplevel
    exclude:
      - '^ \+.*'
      - '^ ANCHOR.*'
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - performance
    disabled-checks:
      - appendAssign
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - evalOrder
      - ifElseChain
      - octalLiteral
      - regexpSimplify
      - sloppyReassign
      - truncateCmp
      - typeDefFirst
      - unnamedResult
      - unnecessaryDefer
      - whyNoLint
      - wrapperFunc
      - rangeValCopy
      - hugeParam
  importas:
    no-unaliased: true
    alias:
      # Kubernetes
      - pkg: k8s.io/api/core/v1
        alias: corev1
      - pkg: k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1
        alias: apiextensionsv1
      - pkg: k8s.io/apimachinery/pkg/apis/meta/v1
        alias: metav1
      - pkg: k8s.io/apimachinery/pkg/api/errors
        alias: apierrors
      - pkg: k8s.io/apimachinery/pkg/util/errors
        alias: kerrors
      - pkg: k8s.io/component-base/logs/api/v1
        alias: logsv1
      # Controller Runtime
      - pkg: sigs.k8s.io/controller-runtime
        alias: ctrl
      # CABPK
      - pkg: sigs.k8s.io/cluster-api/internal/apis/bootstrap/kubeadm/v1alpha3
        alias: bootstrapv1alpha3
      - pkg: sigs.k8s.io/cluster-api/internal/apis/bootstrap/kubeadm/v1alpha4
        alias: bootstrapv1alpha4
      - pkg: sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1
        alias: bootstrapv1
      # KCP
      - pkg: sigs.k8s.io/cluster-api/internal/apis/controlplane/kubeadm/v1alpha3
        alias: controlplanev1alpha3
      - pkg: sigs.k8s.io/cluster-api/internal/apis/controlplane/kubeadm/v1alpha4
        alias: controlplanev1alpha4
      - pkg: sigs.k8s.io/cluster-api/controlplane/kubeadm/api/v1beta1
        alias: controlplanev1
      # CAPI
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/v1alpha3
        alias: clusterv1alpha3
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/v1alpha4
        alias: clusterv1alpha4
      - pkg: sigs.k8s.io/cluster-api/api/v1beta1
        alias: clusterv1
      # CAPI exp
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/exp/v1alpha3
        alias: expv1alpha3
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/exp/v1alpha4
        alias: expv1alpha4
      - pkg: sigs.k8s.io/cluster-api/exp/api/v1beta1
        alias: expv1
      # CAPI exp addons
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/exp/addons/v1alpha3
        alias: addonsv1alpha3
      - pkg: sigs.k8s.io/cluster-api/internal/apis/core/exp/addons/v1alpha4
        alias: addonsv1alpha4
      - pkg: sigs.k8s.io/cluster-api/exp/addons/api/v1beta1
        alias: addonsv1
      # CAPI exp IPAM
      - pkg: sigs.k8s.io/cluster-api/exp/ipam/api/v1beta1
        alias: ipamv1
      # CAPI exp runtime
      - pkg: sigs.k8s.io/cluster-api/exp/runtime/api/v1alpha1
        alias: runtimev1
      - pkg: sigs.k8s.io/cluster-api/exp/runtime/hooks/api/v1alpha1
        alias: runtimehooksv1
      - pkg: sigs.k8s.io/cluster-api/exp/runtime/controllers
        alias: runtimecontrollers
      - pkg: sigs.k8s.io/cluster-api/exp/runtime/catalog
        alias: runtimecatalog
      - pkg: sigs.k8s.io/cluster-api/internal/runtime/client
        alias: runtimeclient
      - pkg: sigs.k8s.io/cluster-api/internal/runtime/registry
        alias: runtimeregistry
      - pkg: sigs.k8s.io/cluster-api/internal/webhooks/runtime
        alias: runtimewebhooks
      # CAPD
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/api/v1alpha3
        alias: infrav1alpha3
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/api/v1alpha4
        alias: infrav1alpha4
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/api/v1beta1
        alias: infrav1
      # CAPD exp
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/exp/api/v1alpha3
        alias: infraexpv1alpha3
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/exp/api/v1alpha4
        alias: infraexpv1alpha4
      - pkg: sigs.k8s.io/cluster-api/test/infrastructure/docker/exp/api/v1beta1
        alias: infraexpv1
  nolintlint:
    allow-unused: false
    allow-leading-space: false
    require-specific: true
  revive:
    rules:
      # The following rules are recommended https://github.com/mgechev/revive#recommended-configuration
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
      #
      # Rules in addition to the recommended configuration above.
      #
      - name: bool-literal-in-expr
      - name: constant-logical-expr
  goconst:
    ignore-tests: true
issues:
  max-same-issues: 0
  max-issues-per-linter: 0
  # We are disabling default golangci exclusions because we want to help reviewers to focus on reviewing the most relevant
  # changes in PRs and avoid nitpicking.
  exclude-use-default: false
  exclude-rules:
  # Specific exclude rules for deprecated fields that are still part of the codebase. These
  # should be removed as the referenced deprecated item is removed from the project.
  - linters:
      - staticcheck
    text: "SA1019: (bootstrapv1.ClusterStatus|KubeadmConfigSpec.UseExperimentalRetryJoin|scope.Config.Spec.UseExperimentalRetryJoin|DockerMachine.Spec.Bootstrapped|machineStatus.Bootstrapped|c.TopologyPlan|clusterv1.ClusterClassVariableMetadata|(variable|currentDefinition|specVar|newVariableDefinition|statusVarDefinition).Metadata) is deprecated"
  # Deprecations for MD revision management
  - linters:
      - staticcheck
    text: "SA1019: ((deployment|m|md).Spec.RevisionHistoryLimit|clusterv1.RevisionHistoryAnnotation|c.RolloutUndo) is deprecated"
    # Deprecations for MHC MaxUnhealthy, UnhealthyRange
  - linters:
      - staticcheck
    text: "SA1019: (mhc|m)(.Spec.MaxUnhealthy|.Spec.UnhealthyRange) is deprecated"
  # Specific exclude rules for deprecated packages that are still part of the codebase. These
  # should be removed as the referenced deprecated packages are removed from the project.
  - linters:
    - staticcheck
    text: "SA1019: .* is deprecated: This package will be removed in one of the next releases."
  # Specific exclude rules for deprecated types that are still part of the codebase. These
  # should be removed as the referenced deprecated types are removed from the project.
  - linters:
    - staticcheck
    text: "SA1019: (clusterv1alpha3.*|clusterv1alpha4.*) is deprecated: This type will be removed in one of the next releases."
  - linters:
    - revive
    text: "exported: exported method .*\\.(Reconcile|SetupWithManager|SetupWebhookWithManager) should have comment or be unexported"
  - linters:
    - errcheck
    text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
  # Exclude some packages or code to require comments, for example test code, or fake clients.
  - linters:
    - revive
    text: exported (method|function|type|const) (.+) should have comment or be unexported
    source: (func|type).*Fake.*
  - linters:
    - revive
    text: exported (method|function|type|const) (.+) should have comment or be unexported
    path: fake_\.go
  - linters:
    - revive
    text: exported (method|function|type|const) (.+) should have comment or be unexported
    path: cmd/clusterctl/internal/test/providers.*.go
  - linters:
    - revive
    text: exported (method|function|type|const) (.+) should have comment or be unexported
    path: "(framework|e2e)/.*.go"
  # Disable unparam "always receives" which might not be really
  # useful when building libraries.
  - linters:
    - unparam
    text: always receives
  # Dot imports for gomega and ginkgo are allowed
  # within test files and test utils.
  - linters:
    - revive
    - stylecheck
    path: _test\.go
    text: should not use dot imports
  - linters:
    - revive
    - stylecheck
    path: (framework|e2e)/.*.go
    text: should not use dot imports
  - linters:
    - revive
    - stylecheck
    path: util/defaulting/defaulting.go
    text: should not use dot imports
  # Large parts of this file are duplicate from k/k. Let's ignore "emptyStringTest" to reduce the noise in diffs
  # and to avoid making mistakes by diverging from upstream just because of this purely stylistic linter finding.
  - linters:
      - gocritic
    text: "emptyStringTest"
    path: internal/topology/variables/clusterclass_variable_validation.go
  # Append should be able to assign to a different var/slice.
  - linters:
    - gocritic
    text: "appendAssign: append result not assigned to the same slice"
 # Disable linters for conversion
  - linters:
    - staticcheck
    text: "SA1019: in.(.+) is deprecated"
    path: .*(api|types)\/.*\/conversion.*\.go$
  - linters:
      - revive
    # Checking if an error is nil to just after return the error or nil is redundant
    text: "if-return: redundant if ...; err != nil check, just return error instead"
    # Ignoring stylistic checks for generated code
    path: .*(api|types|test)\/.*\/conversion.*\.go$
  - linters:
    - revive
    # Exported function and methods should have comments. This warns on undocumented exported functions and methods.
    text: exported (method|function|type|const) (.+) should have comment or be unexported
    # Ignoring stylistic checks for generated code
    path: .*(api|types|test)\/.*\/conversion.*\.go$
  - linters:
    - revive
    # This rule warns when initialism, variable or package naming conventions are not followed.
    text: "var-naming: don't use underscores in Go names;"
    # Ignoring stylistic checks for generated code
    path: .*(api|types|test)\/.*\/conversion.*\.go$
  - linters:
    - revive
    # By convention, receiver names in a method should reflect their identity.
    text: "receiver-naming: receiver name"
    # Ignoring stylistic checks for generated code
    path: .*(api|types)\/.*\/conversion.*\.go$
  - linters:
    - stylecheck
    text: "ST1003: should not use underscores in Go names;"
    path: .*(api|types|test)\/.*\/conversion.*\.go$
  - linters:
    - stylecheck
    text: "ST1016: methods on the same type should have the same receiver name"
    path: .*(api|types)\/.*\/conversion.*\.go$
  # We don't care about defer in for loops in test files.
  - linters:
    - gocritic
    text: "deferInLoop: Possible resource leak, 'defer' is called in the 'for' loop"
    path: _test\.go
